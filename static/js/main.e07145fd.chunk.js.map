{"version":3,"sources":["components/AddToDo/AddToDo.component.jsx","components/ToDo/ToDo.component.jsx","components/ToDoList/ToDoList.component.jsx","components/Header/Header.component.jsx","App.js","serviceWorker.js","index.js"],"names":["AddToDo","nextProps","nextState","onChange","this","props","onSubmit","className","id","type","placeholder","Component","ToDo","task","onClick","onDelete","index","ToDoList","toDoList","lists","map","list","key","Header","number","App","handleChange","e","setState","input","target","value","handleSubmit","preventDefault","state","length","document","getElementById","reset","handleDelete","filteredList","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iVAwBeA,G,0LAnBUC,EAAWC,GAC7B,OAAQD,EAAUE,WAAaC,KAAKC,MAAMF,UAAYF,EAAUK,WAAaF,KAAKC,MAAMC,W,+BAM3F,OACG,yBAAKC,UAAU,aACX,0BAAMD,SAAUF,KAAKC,MAAMC,SAAUE,GAAG,UACpC,2BAAQD,UAAU,QAAQE,KAAK,OAAOC,YAAY,YAAaP,SAAUC,KAAKC,MAAMF,WACpF,4BAAQI,UAAU,iC,GAZXI,cCSPC,G,MATF,SAACP,GACX,OACI,yBAAKE,UAAU,SACVF,EAAMQ,KACP,uBAAGN,UAAU,4BAA4BO,QAAS,kBAAMT,EAAMU,SAASV,EAAMW,aCWzEC,G,MAbE,SAACZ,GACd,IAAMa,EAAWb,EAAMc,MAAMC,KAAI,SAAAC,GAC7B,OACI,kBAAC,EAAD,CAAMC,IAAKD,EAAKb,GAAIK,KAAMQ,EAAKR,KAAMG,MAAOK,EAAKb,GAAIO,SAAUV,EAAMU,cAG7E,OACI,yBAAKR,UAAU,YACTW,KCeCK,G,0LAvBWtB,EAAWC,GAC7B,OAAQD,EAAUuB,SAAWpB,KAAKC,MAAMmB,S,+BAKxC,OAA0B,IAAtBpB,KAAKC,MAAMmB,OAEP,yBAAKjB,UAAU,UACX,wCAAcH,KAAKC,MAAMmB,OAAzB,UAKJ,yBAAKjB,UAAU,UACX,wCAAcH,KAAKC,MAAMmB,OAAzB,e,GAjBCb,cCoDNc,G,wDAhDb,WAAYpB,GAAQ,IAAD,8BACjB,cAAMA,IAQRqB,aAAe,SAACC,GACd,EAAKC,SAAS,CAACC,MAAOF,EAAEG,OAAOC,SAVd,EAanBC,aAAe,SAACL,GACd,IAAIN,EACJM,EAAEM,iBACuB,KAArB,EAAKC,MAAML,QAGdR,EAAO,CAACR,KAAM,EAAKqB,MAAML,MAAOrB,GAAG,EAAK0B,MAAMf,MAAMgB,OAAS,GAG9D,EAAKP,SAAS,CAAET,MAAM,GAAD,mBAAM,EAAKe,MAAMf,OAAjB,CAAwBE,IAAOQ,MAAO,KAC3DO,SAASC,eAAe,UAAUC,UAvBjB,EA0BnBC,aAAe,SAACvB,GACd,IAAMwB,EAAe,EAAKN,MAAMf,MAAMsB,QAAO,SAAApB,GAC3C,OAAOA,EAAKb,KAAOQ,KAGrB,EAAKY,SAAS,CAACT,MAAOqB,KA5BtB,EAAKN,MAAQ,CACXf,MAAO,GACPU,MAAO,IALQ,E,qDAoCjB,OACE,yBAAKtB,UAAU,WACX,kBAAC,EAAD,CAASJ,SAAUC,KAAKsB,aAAcpB,SAAUF,KAAK4B,eAErD,kBAAC,EAAD,CAAUb,MAAOf,KAAK8B,MAAMf,MAAOJ,SAAUX,KAAKmC,eAElD,kBAAC,EAAD,CAAQf,OAAQpB,KAAK8B,MAAMf,MAAMgB,c,GA3CzBxB,cCKE+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFb,SAASC,eAAe,SDyHpB,kBAAmBa,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e07145fd.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nimport './AddToDo.style.css';\n\nclass AddToDo extends Component {\n   shouldComponentUpdate(nextProps, nextState) {\n       return (nextProps.onChange !== this.props.onChange || nextProps.onSubmit !== this.props.onSubmit);\n   }\n\n\n\n   render() {  \n    return (\n       <div className='add-to-do'>\n           <form onSubmit={this.props.onSubmit} id='myForm'>\n               <input  className='input' type='text' placeholder='Add to-do'  onChange={this.props.onChange}/>\n               <button className=\"fas fa-plus-circle add\"></button>\n           </form>\n       </div>\n    )    \n   }\n   \n}\n\nexport default AddToDo;\n\n\n","import React from 'react';\n\nimport './ToDo.style.css';\n\nconst ToDo = (props) => {\n   return (\n       <div className='to-do'>\n           {props.task}\n           <i className=\"fas fa-minus-circle right\" onClick={() => props.onDelete(props.index)}></i>\n       </div>\n   ) \n}\n\nexport default ToDo;","import React from 'react';\n\nimport ToDo from '../ToDo/ToDo.component.jsx';\n\nimport './ToDoList.style.css';\n\nconst ToDoList = (props) => {\n    const toDoList = props.lists.map(list => {\n        return (\n            <ToDo key={list.id} task={list.task} index={list.id} onDelete={props.onDelete}/>\n        )\n    })\n    return (\n        <div className='toDoList'>\n            { toDoList }\n        </div>\n    )\n}\n\nexport default ToDoList;","import React, {Component} from 'react';\n\nimport './Header.style.css';\n\nclass Header extends Component {\n\n    shouldComponentUpdate(nextProps, nextState) {\n        return (nextProps.number !== this.props.number);\n    }\n\n    render() {\n\n        if (this.props.number === 1) {\n        return (\n                <div className='header'>\n                    <h3>You have {this.props.number} task</h3>\n                </div>\n            ) \n        } else {\n            return (\n                <div className='header'>\n                    <h3>You have {this.props.number} tasks</h3>\n                </div>\n            ) \n        }\n    }\n       \n}\n\nexport default Header;","import React, {Component} from 'react';\n\nimport AddToDo from './components/AddToDo/AddToDo.component.jsx';\nimport ToDoList from './components/ToDoList/ToDoList.component.jsx';\nimport Header from './components/Header/Header.component.jsx';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      lists: [],\n      input: ''\n    }\n  }\n\n  handleChange = (e) => {\n    this.setState({input: e.target.value})\n  }\n\n  handleSubmit = (e) => {\n    let list;\n    e.preventDefault();\n    if (this.state.input === '') {\n      return;\n    } else {\n     list = {task: this.state.input, id:this.state.lists.length + 1};\n    };\n\n    this.setState({ lists: [...this.state.lists, list], input: '' });\n    document.getElementById('myForm').reset();\n  }\n\n  handleDelete = (index) => {\n    const filteredList = this.state.lists.filter(list => {\n      return list.id !== index;\n    })\n\n    this.setState({lists: filteredList})\n  }\n\n  \n  render() {\n    return(\n      <div className='wrapper'>\n          <AddToDo onChange={this.handleChange} onSubmit={this.handleSubmit} />\n\n          <ToDoList lists={this.state.lists} onDelete={this.handleDelete}/>\n\n          <Header number={this.state.lists.length}/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}