{"version":3,"sources":["components/TaskIndicator/TaskIndicator.component.jsx","components/InputForm/InputForm.component.jsx","components/ToDo/ToDo.component.jsx","components/ToDoList/ToDoList.component.jsx","App.js","serviceWorker.js","index.js"],"names":["TaskIndicator","props","className","number","InputForm","onSubmit","id","type","placeholder","onChange","ToDo","task","onClick","onDelete","index","ToDoList","toDoList","lists","map","list","key","App","handleChange","e","setState","input","target","value","handleSubmit","preventDefault","state","length","document","getElementById","reset","handleDelete","filteredList","filter","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yVAgBeA,G,MAZO,SAACC,GACnB,OACI,yBAAKC,UAAU,UACX,8DACED,EAAME,OADR,2BAEmB,IAAjBF,EAAME,OAAe,QAAU,cCW9BC,G,MAhBG,SAACH,GACf,OACI,yBAAKC,UAAU,cACX,0BAAMG,SAAUJ,EAAMI,SAAUC,GAAG,UAC/B,2BAAQJ,UAAU,QAClBK,KAAK,OACLC,YAAY,YACZC,SAAUR,EAAMQ,WAEhB,4BAAQP,UAAU,+BCAnBQ,G,MATF,SAACT,GACX,OACI,yBAAKC,UAAU,SACVD,EAAMU,KACP,uBAAGT,UAAU,4BAA4BU,QAAS,kBAAMX,EAAMY,SAASZ,EAAMa,aCYzEC,G,MAdE,SAACd,GACd,IAAMe,EAAWf,EAAMgB,MAAMC,KAAI,SAAAC,GAC7B,OACI,kBAAC,EAAD,CAAMC,IAAKD,EAAKb,GAAIK,KAAMQ,EAAKR,KAAMG,MAAOK,EAAKb,GAAIO,SAAUZ,EAAMY,cAI7E,OACI,yBAAKX,UAAU,YACTc,KCkDCK,G,wDAtDb,aAAe,IAAD,8BACZ,gBAeFC,aAAe,SAACC,GACd,EAAKC,SAAS,CAACC,MAAOF,EAAEG,OAAOC,SAjBnB,EAoBdC,aAAe,SAACL,GACd,IAAIJ,EACJI,EAAEM,iBACuB,KAArB,EAAKC,MAAML,QAGdN,EAAO,CAACR,KAAM,EAAKmB,MAAML,MAAOnB,GAAG,EAAKwB,MAAMb,MAAMc,OAAS,GAG9D,EAAKP,SAAS,CAAEP,MAAM,GAAD,mBAAM,EAAKa,MAAMb,OAAjB,CAAwBE,IAAOM,MAAO,KAC3DO,SAASC,eAAe,UAAUC,UA9BtB,EAiCdC,aAAe,SAACrB,GACd,IAAMsB,EAAe,EAAKN,MAAMb,MAAMoB,QAAO,SAAAlB,GAC3C,OAAOA,EAAKb,KAAOQ,KAErB,EAAKU,SAAS,CAACP,MAAOmB,KAlCtB,EAAKN,MAAQ,CACXb,MAAO,CACL,CAAEN,KAAM,QAASL,GAAI,GAErB,CAAEK,KAAM,QAASL,GAAI,GAErB,CAAEK,KAAM,QAASL,GAAI,IAGvBmB,MAAO,IAZG,E,qDAyCZ,OACE,yBAAKvB,UAAU,OACb,kBAAC,EAAD,CAAWO,SAAU6B,KAAKhB,aAAcjB,SAAUiC,KAAKV,eAEvD,kBAAC,EAAD,CAAWX,MAAOqB,KAAKR,MAAMb,MAAOJ,SAAUyB,KAAKH,eAEnD,kBAAC,EAAD,CAAgBhC,OAAQmC,KAAKR,MAAMb,MAAMc,c,GAhD/BQ,cCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFf,SAASC,eAAe,SDyHpB,kBAAmBe,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2a91cb3e.chunk.js","sourcesContent":["import React from 'react';\n\nimport './TaskIndicator.style.css';\n\nconst TaskIndicator = (props) => {\n    return (\n        <div className='header'>\n            <h3>{`You have  \n            ${props.number}  \n            ${props.number === 1 ? \" task\" : \" tasks\" }`}\n            </h3>\n        </div>\n    ) \n}\n       \n\nexport default TaskIndicator;","import React from 'react';\n\nimport './InputForm.style.css';\n\nconst InputForm = (props) => {\n    return (\n        <div className='input-form'>\n            <form onSubmit={props.onSubmit} id='myForm'>\n                <input  className='input' \n                type='text' \n                placeholder='Add to-do'  \n                onChange={props.onChange}\n                />\n                <button className=\"fas fa-plus-circle add\"></button>\n            </form>\n        </div>\n    )    \n}\n   \n\nexport default InputForm;\n\n","import React from 'react';\n\nimport './ToDo.style.css';\n\nconst ToDo = (props) => {\n   return (\n       <div className='to-do'>\n           {props.task}\n           <i className=\"fas fa-minus-circle right\" onClick={() => props.onDelete(props.index)}></i>\n       </div>\n   ) \n}\n\nexport default ToDo;","import React from 'react';\n\nimport ToDo from '../ToDo/ToDo.component.jsx';\n\nimport './ToDoList.style.css';\n\nconst ToDoList = (props) => {\n    const toDoList = props.lists.map(list => {\n        return (\n            <ToDo key={list.id} task={list.task} index={list.id} onDelete={props.onDelete}/>\n        )\n    })\n    \n    return (\n        <div className='toDoList'>\n            { toDoList }\n        </div>\n    )\n}\n\nexport default ToDoList;","import React, {Component} from 'react';\n\nimport TaskIndicator from './components/TaskIndicator/TaskIndicator.component';\n\nimport InputForm from './components/InputForm/InputForm.component.jsx';\n\nimport ToDoList from './components/ToDoList/ToDoList.component';\n\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      lists: [\n        { task: 'task1', id: 1 },\n\n        { task: 'task2', id: 2 },\n\n        { task: 'task3', id: 3 }\n      ],\n\n      input: ''\n    }\n  }\n\n  handleChange = (e) => {\n    this.setState({input: e.target.value})\n  }\n\n  handleSubmit = (e) => {\n    let list;\n    e.preventDefault();\n    if (this.state.input === '') {\n      return;\n    } else {\n     list = {task: this.state.input, id:this.state.lists.length + 1};\n    };\n\n    this.setState({ lists: [...this.state.lists, list], input: '' });\n    document.getElementById('myForm').reset();\n  }\n\n  handleDelete = (index) => {\n    const filteredList = this.state.lists.filter(list => {\n      return list.id !== index;\n    })\n    this.setState({lists: filteredList})\n  }\n\n  render () {\n    return (\n      <div className='App'>\n        <InputForm onChange={this.handleChange} onSubmit={this.handleSubmit}/>\n\n        <ToDoList  lists={this.state.lists} onDelete={this.handleDelete}/>\n\n        <TaskIndicator  number={this.state.lists.length}/>\n      </div>\n      \n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}